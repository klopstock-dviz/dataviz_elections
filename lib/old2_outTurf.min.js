(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.turf=f()}})(function(){var define,module,exports;return(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c){return c(i,!0)}if(u){return u(i,!0)}var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i+=1){o(t[i])}return o}return r})()({1:[function(require,module,exports){module.exports={helpers:require('@turf/helpers'),transformScale:require('@turf/transform-scale'),area:require('@turf/area'),midpoint:require('@turf/midpoint'),pointsWithinPolygon:require('@turf/points-within-polygon')};},{"@turf/area":2,"@turf/helpers":11,"@turf/midpoint":14,"@turf/points-within-polygon":15,"@turf/transform-scale":19}],2:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var meta_1=require("@turf/meta");var RADIUS=6378137;function area(geojson){return meta_1.geomReduce(geojson,function(value,geom){return value+calculateArea(geom)},0)}exports.default=area;function calculateArea(geom){var total=0;var i;switch(geom.type){case "Polygon":return polygonArea(geom.coordinates);case "MultiPolygon":for(i=0;i<geom.coordinates.length;i+=1){total+=polygonArea(geom.coordinates[i])}return total;case "Point":case "MultiPoint":case "LineString":case "MultiLineString":return 0}return 0}function polygonArea(coords){var total=0;if(coords&&coords.length>0){total+=Math.abs(ringArea(coords[0]));for(var i=1;i<coords.length;i+=1){total-=Math.abs(ringArea(coords[i]))}}return total}function ringArea(coords){var p1;var p2;var p3;var lowerIndex;var middleIndex;var upperIndex;var i;var total=0;var coordsLength=coords.length;if(coordsLength>2){for(i=0;i<coordsLength;i+=1){if(i===coordsLength-2){lowerIndex=coordsLength-2;middleIndex=coordsLength-1;upperIndex=0}else if(i===coordsLength-1){lowerIndex=coordsLength-1;middleIndex=0;upperIndex=1}else{lowerIndex=i;middleIndex=i+1;upperIndex=i+2}p1=coords[lowerIndex];p2=coords[middleIndex];p3=coords[upperIndex];total+=(rad(p3[0])-rad(p1[0]))*Math.sin(rad(p2[1]))}total=(total*RADIUS*RADIUS)/2}return total}function rad(num){return(num*Math.PI)/180}},{"@turf/meta":13}],3:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var meta_1=require("@turf/meta");function bbox(geojson){var result=[Infinity,Infinity,-Infinity,-Infinity];meta_1.coordEach(geojson,function(coord){if(result[0]>coord[0]){result[0]=coord[0]}if(result[1]>coord[1]){result[1]=coord[1]}if(result[2]<coord[0]){result[2]=coord[0]}if(result[3]<coord[1]){result[3]=coord[1]}});return result}bbox["default"]=bbox;exports.default=bbox},{"@turf/meta":13}],4:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var helpers_1=require("@turf/helpers");var invariant_1=require("@turf/invariant");function bearing(start,end,options){if(options===void 0){options={}}if(options.final===true){return calculateFinalBearing(start,end)}var coordinates1=invariant_1.getCoord(start);var coordinates2=invariant_1.getCoord(end);var lon1=helpers_1.degreesToRadians(coordinates1[0]);var lon2=helpers_1.degreesToRadians(coordinates2[0]);var lat1=helpers_1.degreesToRadians(coordinates1[1]);var lat2=helpers_1.degreesToRadians(coordinates2[1]);var a=Math.sin(lon2-lon1)*Math.cos(lat2);var b=Math.cos(lat1)*Math.sin(lat2)-Math.sin(lat1)*Math.cos(lat2)*Math.cos(lon2-lon1);return helpers_1.radiansToDegrees(Math.atan2(a,b))}exports.default=bearing;function calculateFinalBearing(start,end){var bear=bearing(end,start);bear=(bear+180)%360;return bear}},{"@turf/helpers":11,"@turf/invariant":12}],5:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var invariant_1=require("@turf/invariant");function booleanPointInPolygon(point,polygon,options){if(options===void 0){options={}}if(!point){throw new Error("point is required")}if(!polygon){throw new Error("polygon is required")}var pt=invariant_1.getCoord(point);var geom=invariant_1.getGeom(polygon);var type=geom.type;var bbox=polygon.bbox;var polys=geom.coordinates;if(bbox&&inBBox(pt,bbox)===false){return false}if(type==="Polygon"){polys=[polys]}var insidePoly=false;for(var i=0;i<polys.length&&!insidePoly;i+=1){if(inRing(pt,polys[i][0],options.ignoreBoundary)){var inHole=false;var k=1;while(k<polys[i].length&&!inHole){if(inRing(pt,polys[i][k],!options.ignoreBoundary)){inHole=true}k+=1}if(!inHole){insidePoly=true}}}return insidePoly}exports.default=booleanPointInPolygon;function inRing(pt,ring,ignoreBoundary){var isInside=false;if(ring[0][0]===ring[ring.length-1][0]&&ring[0][1]===ring[ring.length-1][1]){ring=ring.slice(0,ring.length-1)}for(var i=0,j=ring.length-1;i<ring.length;j=i++){var xi=ring[i][0];var yi=ring[i][1];var xj=ring[j][0];var yj=ring[j][1];var onBoundary=pt[1]*(xi-xj)+yi*(xj-pt[0])+yj*(pt[0]-xi)===0&&(xi-pt[0])*(xj-pt[0])<=0&&(yi-pt[1])*(yj-pt[1])<=0;if(onBoundary){return!ignoreBoundary}var intersect=yi>pt[1]!==yj>pt[1]&&pt[0]<((xj-xi)*(pt[1]-yi))/(yj-yi)+xi;if(intersect){isInside=!isInside}}return isInside}function inBBox(pt,bbox){return(bbox[0]<=pt[0]&&bbox[1]<=pt[1]&&bbox[2]>=pt[0]&&bbox[3]>=pt[1])}},{"@turf/invariant":12}],6:[function(require,module,exports){"use strict";var __importDefault=(this&&this.__importDefault)||function(mod){return(mod&&mod.__esModule)?mod:{"default":mod}};Object.defineProperty(exports,"__esModule",{value:true});var bbox_1=__importDefault(require("@turf/bbox"));var helpers_1=require("@turf/helpers");function center(geojson,options){if(options===void 0){options={}}var ext=bbox_1.default(geojson);var x=(ext[0]+ext[2])/2;var y=(ext[1]+ext[3])/2;return helpers_1.point([x,y],options.properties,options)}exports.default=center},{"@turf/bbox":3,"@turf/helpers":11}],7:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var meta_1=require("@turf/meta");var helpers_1=require("@turf/helpers");function centroid(geojson,options){if(options===void 0){options={}}var xSum=0;var ySum=0;var len=0;meta_1.coordEach(geojson,function(coord){xSum+=coord[0];ySum+=coord[1];len+=1},true);return helpers_1.point([xSum/len,ySum/len],options.properties)}exports.default=centroid},{"@turf/helpers":11,"@turf/meta":13}],8:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});function clone(geojson){if(!geojson){throw new Error("geojson is required")}switch(geojson.type){case "Feature":return cloneFeature(geojson);case "FeatureCollection":return cloneFeatureCollection(geojson);case "Point":case "LineString":case "Polygon":case "MultiPoint":case "MultiLineString":case "MultiPolygon":case "GeometryCollection":return cloneGeometry(geojson);default:throw new Error("unknown GeoJSON type")}}function cloneFeature(geojson){var cloned={type:"Feature"};Object.keys(geojson).forEach(function(key){switch(key){case "type":case "properties":case "geometry":return;default:cloned[key]=geojson[key]}});cloned.properties=cloneProperties(geojson.properties);cloned.geometry=cloneGeometry(geojson.geometry);return cloned}function cloneProperties(properties){var cloned={};if(!properties){return cloned}Object.keys(properties).forEach(function(key){var value=properties[key];if(typeof value==="object"){if(value===null){cloned[key]=null}else if(Array.isArray(value)){cloned[key]=value.map(function(item){return item})}else{cloned[key]=cloneProperties(value)}}else{cloned[key]=value}});return cloned}function cloneFeatureCollection(geojson){var cloned={type:"FeatureCollection"};Object.keys(geojson).forEach(function(key){switch(key){case "type":case "features":return;default:cloned[key]=geojson[key]}});cloned.features=geojson.features.map(function(feature){return cloneFeature(feature)});return cloned}function cloneGeometry(geometry){var geom={type:geometry.type};if(geometry.bbox){geom.bbox=geometry.bbox}if(geometry.type==="GeometryCollection"){geom.geometries=geometry.geometries.map(function(g){return cloneGeometry(g)});return geom}geom.coordinates=deepSlice(geometry.coordinates);return geom}function deepSlice(coords){var cloned=coords;if(typeof cloned[0]!=="object"){return cloned.slice()}return cloned.map(function(coord){return deepSlice(coord)})}exports.default=clone},{}],9:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var helpers_1=require("@turf/helpers");var invariant_1=require("@turf/invariant");function destination(origin,distance,bearing,options){if(options===void 0){options={}}var coordinates1=invariant_1.getCoord(origin);var longitude1=helpers_1.degreesToRadians(coordinates1[0]);var latitude1=helpers_1.degreesToRadians(coordinates1[1]);var bearingRad=helpers_1.degreesToRadians(bearing);var radians=helpers_1.lengthToRadians(distance,options.units);var latitude2=Math.asin(Math.sin(latitude1)*Math.cos(radians)+Math.cos(latitude1)*Math.sin(radians)*Math.cos(bearingRad));var longitude2=longitude1+Math.atan2(Math.sin(bearingRad)*Math.sin(radians)*Math.cos(latitude1),Math.cos(radians)-Math.sin(latitude1)*Math.sin(latitude2));var lng=helpers_1.radiansToDegrees(longitude2);var lat=helpers_1.radiansToDegrees(latitude2);return helpers_1.point([lng,lat],options.properties)}exports.default=destination},{"@turf/helpers":11,"@turf/invariant":12}],10:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var invariant_1=require("@turf/invariant");var helpers_1=require("@turf/helpers");function distance(from,to,options){if(options===void 0){options={}}var coordinates1=invariant_1.getCoord(from);var coordinates2=invariant_1.getCoord(to);var dLat=helpers_1.degreesToRadians(coordinates2[1]-coordinates1[1]);var dLon=helpers_1.degreesToRadians(coordinates2[0]-coordinates1[0]);var lat1=helpers_1.degreesToRadians(coordinates1[1]);var lat2=helpers_1.degreesToRadians(coordinates2[1]);var a=Math.pow(Math.sin(dLat/2),2)+Math.pow(Math.sin(dLon/2),2)*Math.cos(lat1)*Math.cos(lat2);return helpers_1.radiansToLength(2*Math.atan2(Math.sqrt(a),Math.sqrt(1-a)),options.units)}exports.default=distance},{"@turf/helpers":11,"@turf/invariant":12}],11:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});exports.earthRadius=6371008.8;exports.factors={centimeters:exports.earthRadius*100,centimetres:exports.earthRadius*100,degrees:exports.earthRadius/111325,feet:exports.earthRadius*3.28084,inches:exports.earthRadius*39.37,kilometers:exports.earthRadius/1000,kilometres:exports.earthRadius/1000,meters:exports.earthRadius,metres:exports.earthRadius,miles:exports.earthRadius/1609.344,millimeters:exports.earthRadius*1000,millimetres:exports.earthRadius*1000,nauticalmiles:exports.earthRadius/1852,radians:1,yards:exports.earthRadius*1.0936};exports.unitsFactors={centimeters:100,centimetres:100,degrees:1/111325,feet:3.28084,inches:39.37,kilometers:1/1000,kilometres:1/1000,meters:1,metres:1,miles:1/1609.344,millimeters:1000,millimetres:1000,nauticalmiles:1/1852,radians:1/exports.earthRadius,yards:1.0936133};exports.areaFactors={acres:0.000247105,centimeters:10000,centimetres:10000,feet:10.763910417,hectares:0.0001,inches:1550.003100006,kilometers:0.000001,kilometres:0.000001,meters:1,metres:1,miles:3.86e-7,millimeters:1000000,millimetres:1000000,yards:1.195990046};function feature(geom,properties,options){if(options===void 0){options={}}var feat={type:"Feature"};if(options.id===0||options.id){feat.id=options.id}if(options.bbox){feat.bbox=options.bbox}feat.properties=properties||{};feat.geometry=geom;return feat}exports.feature=feature;function geometry(type,coordinates,_options){if(_options===void 0){_options={}}switch(type){case "Point":return point(coordinates).geometry;case "LineString":return lineString(coordinates).geometry;case "Polygon":return polygon(coordinates).geometry;case "MultiPoint":return multiPoint(coordinates).geometry;case "MultiLineString":return multiLineString(coordinates).geometry;case "MultiPolygon":return multiPolygon(coordinates).geometry;default:throw new Error(type+" is invalid")}}exports.geometry=geometry;function point(coordinates,properties,options){if(options===void 0){options={}}if(!coordinates){throw new Error("coordinates is required")}if(!Array.isArray(coordinates)){throw new Error("coordinates must be an Array")}if(coordinates.length<2){throw new Error("coordinates must be at least 2 numbers long")}if(!isNumber(coordinates[0])||!isNumber(coordinates[1])){throw new Error("coordinates must contain numbers")}var geom={type:"Point",coordinates:coordinates};return feature(geom,properties,options)}exports.point=point;function points(coordinates,properties,options){if(options===void 0){options={}}return featureCollection(coordinates.map(function(coords){return point(coords,properties)}),options)}exports.points=points;function polygon(coordinates,properties,options){if(options===void 0){options={}}for(var _i=0,coordinates_1=coordinates;_i<coordinates_1.length;_i+=1){var ring=coordinates_1[_i];if(ring.length<4){throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.")}for(var j=0;j<ring[ring.length-1].length;j+=1){if(ring[ring.length-1][j]!==ring[0][j]){throw new Error("First and last Position are not equivalent.")}}}var geom={type:"Polygon",coordinates:coordinates};return feature(geom,properties,options)}exports.polygon=polygon;function polygons(coordinates,properties,options){if(options===void 0){options={}}return featureCollection(coordinates.map(function(coords){return polygon(coords,properties)}),options)}exports.polygons=polygons;function lineString(coordinates,properties,options){if(options===void 0){options={}}if(coordinates.length<2){throw new Error("coordinates must be an array of two or more positions")}var geom={type:"LineString",coordinates:coordinates};return feature(geom,properties,options)}exports.lineString=lineString;function lineStrings(coordinates,properties,options){if(options===void 0){options={}}return featureCollection(coordinates.map(function(coords){return lineString(coords,properties)}),options)}exports.lineStrings=lineStrings;function featureCollection(features,options){if(options===void 0){options={}}var fc={type:"FeatureCollection"};if(options.id){fc.id=options.id}if(options.bbox){fc.bbox=options.bbox}fc.features=features;return fc}exports.featureCollection=featureCollection;function multiLineString(coordinates,properties,options){if(options===void 0){options={}}var geom={type:"MultiLineString",coordinates:coordinates};return feature(geom,properties,options)}exports.multiLineString=multiLineString;function multiPoint(coordinates,properties,options){if(options===void 0){options={}}var geom={type:"MultiPoint",coordinates:coordinates};return feature(geom,properties,options)}exports.multiPoint=multiPoint;function multiPolygon(coordinates,properties,options){if(options===void 0){options={}}var geom={type:"MultiPolygon",coordinates:coordinates};return feature(geom,properties,options)}exports.multiPolygon=multiPolygon;function geometryCollection(geometries,properties,options){if(options===void 0){options={}}var geom={type:"GeometryCollection",geometries:geometries};return feature(geom,properties,options)}exports.geometryCollection=geometryCollection;function round(num,precision){if(precision===void 0){precision=0}if(precision&&!(precision>=0)){throw new Error("precision must be a positive number")}var multiplier=Math.pow(10,precision||0);return Math.round(num*multiplier)/multiplier}exports.round=round;function radiansToLength(radians,units){if(units===void 0){units="kilometers"}var factor=exports.factors[units];if(!factor){throw new Error(units+" units is invalid")}return radians*factor}exports.radiansToLength=radiansToLength;function lengthToRadians(distance,units){if(units===void 0){units="kilometers"}var factor=exports.factors[units];if(!factor){throw new Error(units+" units is invalid")}return distance/factor}exports.lengthToRadians=lengthToRadians;function lengthToDegrees(distance,units){return radiansToDegrees(lengthToRadians(distance,units))}exports.lengthToDegrees=lengthToDegrees;function bearingToAzimuth(bearing){var angle=bearing%360;if(angle<0){angle+=360}return angle}exports.bearingToAzimuth=bearingToAzimuth;function radiansToDegrees(radians){var degrees=radians%(2*Math.PI);return(degrees*180)/Math.PI}exports.radiansToDegrees=radiansToDegrees;function degreesToRadians(degrees){var radians=degrees%360;return(radians*Math.PI)/180}exports.degreesToRadians=degreesToRadians;function convertLength(length,originalUnit,finalUnit){if(originalUnit===void 0){originalUnit="kilometers"}if(finalUnit===void 0){finalUnit="kilometers"}if(!(length>=0)){throw new Error("length must be a positive number")}return radiansToLength(lengthToRadians(length,originalUnit),finalUnit)}exports.convertLength=convertLength;function convertArea(area,originalUnit,finalUnit){if(originalUnit===void 0){originalUnit="meters"}if(finalUnit===void 0){finalUnit="kilometers"}if(!(area>=0)){throw new Error("area must be a positive number")}var startFactor=exports.areaFactors[originalUnit];if(!startFactor){throw new Error("invalid original units")}var finalFactor=exports.areaFactors[finalUnit];if(!finalFactor){throw new Error("invalid final units")}return(area/startFactor)*finalFactor}exports.convertArea=convertArea;function isNumber(num){return!isNaN(num)&&num!==null&&!Array.isArray(num)}exports.isNumber=isNumber;function isObject(input){return!!input&&input.constructor===Object}exports.isObject=isObject;function validateBBox(bbox){if(!bbox){throw new Error("bbox is required")}if(!Array.isArray(bbox)){throw new Error("bbox must be an Array")}if(bbox.length!==4&&bbox.length!==6){throw new Error("bbox must be an Array of 4 or 6 numbers")}bbox.forEach(function(num){if(!isNumber(num)){throw new Error("bbox must only contain numbers")}})}exports.validateBBox=validateBBox;function validateId(id){if(!id){throw new Error("id is required")}if(["string","number"].indexOf(typeof id)===-1){throw new Error("id must be a number or a string")}}exports.validateId=validateId},{}],12:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var helpers_1=require("@turf/helpers");function getCoord(coord){if(!coord){throw new Error("coord is required")}if(!Array.isArray(coord)){if(coord.type==="Feature"&&coord.geometry!==null&&coord.geometry.type==="Point"){return coord.geometry.coordinates}if(coord.type==="Point"){return coord.coordinates}}if(Array.isArray(coord)&&coord.length>=2&&!Array.isArray(coord[0])&&!Array.isArray(coord[1])){return coord}throw new Error("coord must be GeoJSON Point or an Array of numbers")}exports.getCoord=getCoord;function getCoords(coords){if(Array.isArray(coords)){return coords}if(coords.type==="Feature"){if(coords.geometry!==null){return coords.geometry.coordinates}}else{if(coords.coordinates){return coords.coordinates}}throw new Error("coords must be GeoJSON Feature, Geometry Object or an Array")}exports.getCoords=getCoords;function containsNumber(coordinates){if(coordinates.length>1&&helpers_1.isNumber(coordinates[0])&&helpers_1.isNumber(coordinates[1])){return true}if(Array.isArray(coordinates[0])&&coordinates[0].length){return containsNumber(coordinates[0])}throw new Error("coordinates must only contain numbers")}exports.containsNumber=containsNumber;function geojsonType(value,type,name){if(!type||!name){throw new Error("type and name required")}if(!value||value.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+value.type)}}exports.geojsonType=geojsonType;function featureOf(feature,type,name){if(!feature){throw new Error("No feature passed")}if(!name){throw new Error(".featureOf() requires a name")}if(!feature||feature.type!=="Feature"||!feature.geometry){throw new Error("Invalid input to "+name+", Feature with geometry required")}if(!feature.geometry||feature.geometry.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}}exports.featureOf=featureOf;function collectionOf(featureCollection,type,name){if(!featureCollection){throw new Error("No featureCollection passed")}if(!name){throw new Error(".collectionOf() requires a name")}if(!featureCollection||featureCollection.type!=="FeatureCollection"){throw new Error("Invalid input to "+name+", FeatureCollection required")}for(var _i=0,_a=featureCollection.features;_i<_a.length;_i+=1){var feature=_a[_i];if(!feature||feature.type!=="Feature"||!feature.geometry){throw new Error("Invalid input to "+name+", Feature with geometry required")}if(!feature.geometry||feature.geometry.type!==type){throw new Error("Invalid input to "+name+": must be a "+type+", given "+feature.geometry.type)}}}exports.collectionOf=collectionOf;function getGeom(geojson){if(geojson.type==="Feature"){return geojson.geometry}return geojson}exports.getGeom=getGeom;function getType(geojson,_name){if(geojson.type==="FeatureCollection"){return "FeatureCollection"}if(geojson.type==="GeometryCollection"){return "GeometryCollection"}if(geojson.type==="Feature"&&geojson.geometry!==null){return geojson.geometry.type}return geojson.type}exports.getType=getType},{"@turf/helpers":11}],13:[function(require,module,exports){'use strict';Object.defineProperty(exports,'__esModule',{value:true});var helpers=require('@turf/helpers');function coordEach(geojson,callback,excludeWrapCoord){if(geojson===null){return}var j,k,l,geometry,stopG,coords,geometryMaybeCollection,wrapShrink=0,coordIndex=0,isGeometryCollection,type=geojson.type,isFeatureCollection=type==="FeatureCollection",isFeature=type==="Feature",stop=isFeatureCollection?geojson.features.length:1;for(var featureIndex=0;featureIndex<stop;featureIndex+=1){geometryMaybeCollection=isFeatureCollection?geojson.features[featureIndex].geometry:isFeature?geojson.geometry:geojson;isGeometryCollection=geometryMaybeCollection?geometryMaybeCollection.type==="GeometryCollection":false;stopG=isGeometryCollection?geometryMaybeCollection.geometries.length:1;for(var geomIndex=0;geomIndex<stopG;geomIndex+=1){var multiFeatureIndex=0;var geometryIndex=0;geometry=isGeometryCollection?geometryMaybeCollection.geometries[geomIndex]:geometryMaybeCollection;if(geometry===null){continue}coords=geometry.coordinates;var geomType=geometry.type;wrapShrink=excludeWrapCoord&&(geomType==="Polygon"||geomType==="MultiPolygon")?1:0;switch(geomType){case null:break;case "Point":if(callback(coords,coordIndex,featureIndex,multiFeatureIndex,geometryIndex)===false){return false}coordIndex+=1;multiFeatureIndex+=1;break;case "LineString":case "MultiPoint":for(j=0;j<coords.length;j+=1){if(callback(coords[j],coordIndex,featureIndex,multiFeatureIndex,geometryIndex)===false){return false}coordIndex+=1;if(geomType==="MultiPoint"){multiFeatureIndex+=1}}if(geomType==="LineString"){multiFeatureIndex+=1}break;case "Polygon":case "MultiLineString":for(j=0;j<coords.length;j+=1){for(k=0;k<coords[j].length-wrapShrink;k+=1){if(callback(coords[j][k],coordIndex,featureIndex,multiFeatureIndex,geometryIndex)===false){return false}coordIndex+=1}if(geomType==="MultiLineString"){multiFeatureIndex+=1}if(geomType==="Polygon"){geometryIndex+=1}}if(geomType==="Polygon"){multiFeatureIndex+=1}break;case "MultiPolygon":for(j=0;j<coords.length;j+=1){geometryIndex=0;for(k=0;k<coords[j].length;k+=1){for(l=0;l<coords[j][k].length-wrapShrink;l+=1){if(callback(coords[j][k][l],coordIndex,featureIndex,multiFeatureIndex,geometryIndex)===false){return false}coordIndex+=1}geometryIndex+=1}multiFeatureIndex+=1}break;case "GeometryCollection":for(j=0;j<geometry.geometries.length;j+=1){if(coordEach(geometry.geometries[j],callback,excludeWrapCoord)===false){return false}}break;default:throw new Error("Unknown Geometry Type")}}}}function coordReduce(geojson,callback,initialValue,excludeWrapCoord){var previousValue=initialValue;coordEach(geojson,function(currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex){if(coordIndex===0&&initialValue===undefined){previousValue=currentCoord}else{previousValue=callback(previousValue,currentCoord,coordIndex,featureIndex,multiFeatureIndex,geometryIndex)}},excludeWrapCoord);return previousValue}function propEach(geojson,callback){var i;switch(geojson.type){case "FeatureCollection":for(i=0;i<geojson.features.length;i+=1){if(callback(geojson.features[i].properties,i)===false){break}}break;case "Feature":callback(geojson.properties,0);break}}function propReduce(geojson,callback,initialValue){var previousValue=initialValue;propEach(geojson,function(currentProperties,featureIndex){if(featureIndex===0&&initialValue===undefined){previousValue=currentProperties}else{previousValue=callback(previousValue,currentProperties,featureIndex)}});return previousValue}function featureEach(geojson,callback){if(geojson.type==="Feature"){callback(geojson,0)}else if(geojson.type==="FeatureCollection"){for(var i=0;i<geojson.features.length;i+=1){if(callback(geojson.features[i],i)===false){break}}}}function featureReduce(geojson,callback,initialValue){var previousValue=initialValue;featureEach(geojson,function(currentFeature,featureIndex){if(featureIndex===0&&initialValue===undefined){previousValue=currentFeature}else{previousValue=callback(previousValue,currentFeature,featureIndex)}});return previousValue}function coordAll(geojson){var coords=[];coordEach(geojson,function(coord){coords.push(coord)});return coords}function geomEach(geojson,callback){var i,j,g,geometry,stopG,geometryMaybeCollection,isGeometryCollection,featureProperties,featureBBox,featureId,featureIndex=0,isFeatureCollection=geojson.type==="FeatureCollection",isFeature=geojson.type==="Feature",stop=isFeatureCollection?geojson.features.length:1;for(i=0;i<stop;i+=1){geometryMaybeCollection=isFeatureCollection?geojson.features[i].geometry:isFeature?geojson.geometry:geojson;featureProperties=isFeatureCollection?geojson.features[i].properties:isFeature?geojson.properties:{};featureBBox=isFeatureCollection?geojson.features[i].bbox:isFeature?geojson.bbox:undefined;featureId=isFeatureCollection?geojson.features[i].id:isFeature?geojson.id:undefined;isGeometryCollection=geometryMaybeCollection?geometryMaybeCollection.type==="GeometryCollection":false;stopG=isGeometryCollection?geometryMaybeCollection.geometries.length:1;for(g=0;g<stopG;g+=1){geometry=isGeometryCollection?geometryMaybeCollection.geometries[g]:geometryMaybeCollection;if(geometry===null){if(callback(null,featureIndex,featureProperties,featureBBox,featureId)===false){return false}continue}switch(geometry.type){case "Point":case "LineString":case "MultiPoint":case "Polygon":case "MultiLineString":case "MultiPolygon":{if(callback(geometry,featureIndex,featureProperties,featureBBox,featureId)===false){return false}break}case "GeometryCollection":{for(j=0;j<geometry.geometries.length;j+=1){if(callback(geometry.geometries[j],featureIndex,featureProperties,featureBBox,featureId)===false){return false}}break}default:throw new Error("Unknown Geometry Type")}}featureIndex+=1}}function geomReduce(geojson,callback,initialValue){var previousValue=initialValue;geomEach(geojson,function(currentGeometry,featureIndex,featureProperties,featureBBox,featureId){if(featureIndex===0&&initialValue===undefined){previousValue=currentGeometry}else{previousValue=callback(previousValue,currentGeometry,featureIndex,featureProperties,featureBBox,featureId)}});return previousValue}function flattenEach(geojson,callback){geomEach(geojson,function(geometry,featureIndex,properties,bbox,id){var type=geometry===null?null:geometry.type;switch(type){case null:case "Point":case "LineString":case "Polygon":if(callback(helpers.feature(geometry,properties,{bbox:bbox,id:id}),featureIndex,0)===false){return false}return}var geomType;switch(type){case "MultiPoint":geomType="Point";break;case "MultiLineString":geomType="LineString";break;case "MultiPolygon":geomType="Polygon";break}for(var multiFeatureIndex=0;multiFeatureIndex<geometry.coordinates.length;multiFeatureIndex+=1){var coordinate=geometry.coordinates[multiFeatureIndex];var geom={type:geomType,coordinates:coordinate};if(callback(helpers.feature(geom,properties),featureIndex,multiFeatureIndex)===false){return false}}})}function flattenReduce(geojson,callback,initialValue){var previousValue=initialValue;flattenEach(geojson,function(currentFeature,featureIndex,multiFeatureIndex){if(featureIndex===0&&multiFeatureIndex===0&&initialValue===undefined){previousValue=currentFeature}else{previousValue=callback(previousValue,currentFeature,featureIndex,multiFeatureIndex)}});return previousValue}function segmentEach(geojson,callback){flattenEach(geojson,function(feature,featureIndex,multiFeatureIndex){var segmentIndex=0;if(!feature.geometry){return}var type=feature.geometry.type;if(type==="Point"||type==="MultiPoint"){return}var previousCoords;var previousFeatureIndex=0;var previousMultiIndex=0;var prevGeomIndex=0;if(coordEach(feature,function(currentCoord,coordIndex,featureIndexCoord,multiPartIndexCoord,geometryIndex){if(previousCoords===undefined||featureIndex>previousFeatureIndex||multiPartIndexCoord>previousMultiIndex||geometryIndex>prevGeomIndex){previousCoords=currentCoord;previousFeatureIndex=featureIndex;previousMultiIndex=multiPartIndexCoord;prevGeomIndex=geometryIndex;segmentIndex=0;return}var currentSegment=helpers.lineString([previousCoords,currentCoord],feature.properties);if(callback(currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex)===false){return false}segmentIndex+=1;previousCoords=currentCoord})===false){return false}})}function segmentReduce(geojson,callback,initialValue){var previousValue=initialValue;var started=false;segmentEach(geojson,function(currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex){if(started===false&&initialValue===undefined){previousValue=currentSegment}else{previousValue=callback(previousValue,currentSegment,featureIndex,multiFeatureIndex,geometryIndex,segmentIndex)}started=true});return previousValue}function lineEach(geojson,callback){if(!geojson){throw new Error("geojson is required")}flattenEach(geojson,function(feature,featureIndex,multiFeatureIndex){if(feature.geometry===null){return}var type=feature.geometry.type;var coords=feature.geometry.coordinates;switch(type){case "LineString":if(callback(feature,featureIndex,multiFeatureIndex,0,0)===false){return false}break;case "Polygon":for(var geometryIndex=0;geometryIndex<coords.length;geometryIndex+=1){if(callback(helpers.lineString(coords[geometryIndex],feature.properties),featureIndex,multiFeatureIndex,geometryIndex)===false){return false}}break}})}function lineReduce(geojson,callback,initialValue){var previousValue=initialValue;lineEach(geojson,function(currentLine,featureIndex,multiFeatureIndex,geometryIndex){if(featureIndex===0&&initialValue===undefined){previousValue=currentLine}else{previousValue=callback(previousValue,currentLine,featureIndex,multiFeatureIndex,geometryIndex)}});return previousValue}function findSegment(geojson,options){options=options||{};if(!helpers.isObject(options)){throw new Error("options is invalid")}var featureIndex=options.featureIndex||0;var multiFeatureIndex=options.multiFeatureIndex||0;var geometryIndex=options.geometryIndex||0;var segmentIndex=options.segmentIndex||0;var properties=options.properties;var geometry;switch(geojson.type){case "FeatureCollection":if(featureIndex<0){featureIndex=geojson.features.length+featureIndex}properties=properties||geojson.features[featureIndex].properties;geometry=geojson.features[featureIndex].geometry;break;case "Feature":properties=properties||geojson.properties;geometry=geojson.geometry;break;case "Point":case "MultiPoint":return null;case "LineString":case "Polygon":case "MultiLineString":case "MultiPolygon":geometry=geojson;break;default:throw new Error("geojson is invalid")}if(geometry===null){return null}var coords=geometry.coordinates;switch(geometry.type){case "Point":case "MultiPoint":return null;case "LineString":if(segmentIndex<0){segmentIndex=coords.length+segmentIndex-1}return helpers.lineString([coords[segmentIndex],coords[segmentIndex+1]],properties,options);case "Polygon":if(geometryIndex<0){geometryIndex=coords.length+geometryIndex}if(segmentIndex<0){segmentIndex=coords[geometryIndex].length+segmentIndex-1}return helpers.lineString([coords[geometryIndex][segmentIndex],coords[geometryIndex][segmentIndex+1]],properties,options);case "MultiLineString":if(multiFeatureIndex<0){multiFeatureIndex=coords.length+multiFeatureIndex}if(segmentIndex<0){segmentIndex=coords[multiFeatureIndex].length+segmentIndex-1}return helpers.lineString([coords[multiFeatureIndex][segmentIndex],coords[multiFeatureIndex][segmentIndex+1]],properties,options);case "MultiPolygon":if(multiFeatureIndex<0){multiFeatureIndex=coords.length+multiFeatureIndex}if(geometryIndex<0){geometryIndex=coords[multiFeatureIndex].length+geometryIndex}if(segmentIndex<0){segmentIndex=coords[multiFeatureIndex][geometryIndex].length-segmentIndex-1}return helpers.lineString([coords[multiFeatureIndex][geometryIndex][segmentIndex],coords[multiFeatureIndex][geometryIndex][segmentIndex+1]],properties,options)}throw new Error("geojson is invalid")}function findPoint(geojson,options){options=options||{};if(!helpers.isObject(options)){throw new Error("options is invalid")}var featureIndex=options.featureIndex||0;var multiFeatureIndex=options.multiFeatureIndex||0;var geometryIndex=options.geometryIndex||0;var coordIndex=options.coordIndex||0;var properties=options.properties;var geometry;switch(geojson.type){case "FeatureCollection":if(featureIndex<0){featureIndex=geojson.features.length+featureIndex}properties=properties||geojson.features[featureIndex].properties;geometry=geojson.features[featureIndex].geometry;break;case "Feature":properties=properties||geojson.properties;geometry=geojson.geometry;break;case "Point":case "MultiPoint":return null;case "LineString":case "Polygon":case "MultiLineString":case "MultiPolygon":geometry=geojson;break;default:throw new Error("geojson is invalid")}if(geometry===null){return null}var coords=geometry.coordinates;switch(geometry.type){case "Point":return helpers.point(coords,properties,options);case "MultiPoint":if(multiFeatureIndex<0){multiFeatureIndex=coords.length+multiFeatureIndex}return helpers.point(coords[multiFeatureIndex],properties,options);case "LineString":if(coordIndex<0){coordIndex=coords.length+coordIndex}return helpers.point(coords[coordIndex],properties,options);case "Polygon":if(geometryIndex<0){geometryIndex=coords.length+geometryIndex}if(coordIndex<0){coordIndex=coords[geometryIndex].length+coordIndex}return helpers.point(coords[geometryIndex][coordIndex],properties,options);case "MultiLineString":if(multiFeatureIndex<0){multiFeatureIndex=coords.length+multiFeatureIndex}if(coordIndex<0){coordIndex=coords[multiFeatureIndex].length+coordIndex}return helpers.point(coords[multiFeatureIndex][coordIndex],properties,options);case "MultiPolygon":if(multiFeatureIndex<0){multiFeatureIndex=coords.length+multiFeatureIndex}if(geometryIndex<0){geometryIndex=coords[multiFeatureIndex].length+geometryIndex}if(coordIndex<0){coordIndex=coords[multiFeatureIndex][geometryIndex].length-coordIndex}return helpers.point(coords[multiFeatureIndex][geometryIndex][coordIndex],properties,options)}throw new Error("geojson is invalid")}exports.coordAll=coordAll;exports.coordEach=coordEach;exports.coordReduce=coordReduce;exports.featureEach=featureEach;exports.featureReduce=featureReduce;exports.findPoint=findPoint;exports.findSegment=findSegment;exports.flattenEach=flattenEach;exports.flattenReduce=flattenReduce;exports.geomEach=geomEach;exports.geomReduce=geomReduce;exports.lineEach=lineEach;exports.lineReduce=lineReduce;exports.propEach=propEach;exports.propReduce=propReduce;exports.segmentEach=segmentEach;exports.segmentReduce=segmentReduce},{"@turf/helpers":11}],14:[function(require,module,exports){'use strict';var bearing=require('@turf/bearing');var destination=require('@turf/destination');var distance=require('@turf/distance');function _interopDefaultLegacy(e){return e&&typeof e==='object'&&'default'in e?e:{'default':e}}var bearing__default=_interopDefaultLegacy(bearing);var destination__default=_interopDefaultLegacy(destination);var distance__default=_interopDefaultLegacy(distance);function midpoint(point1,point2){var dist=distance__default['default'](point1,point2);var heading=bearing__default['default'](point1,point2);var midpoint=destination__default['default'](point1,dist/2,heading);return midpoint}module.exports=midpoint;module.exports.default=midpoint},{"@turf/bearing":4,"@turf/destination":9,"@turf/distance":10}],15:[function(require,module,exports){'use strict';var pointInPolygon=require('@turf/boolean-point-in-polygon');var helpers=require('@turf/helpers');var meta=require('@turf/meta');function _interopDefaultLegacy(e){return e&&typeof e==='object'&&'default'in e?e:{'default':e}}var pointInPolygon__default=_interopDefaultLegacy(pointInPolygon);function pointsWithinPolygon(points,polygons){var results=[];meta.featureEach(points,function(point){var contained=false;if(point.geometry.type==="Point"){meta.geomEach(polygons,function(polygon){if(pointInPolygon__default['default'](point,polygon)){contained=true}});if(contained){results.push(point)}}else if(point.geometry.type==="MultiPoint"){var pointsWithin=[];meta.geomEach(polygons,function(polygon){meta.coordEach(point,function(pointCoord){if(pointInPolygon__default['default'](pointCoord,polygon)){contained=true;pointsWithin.push(pointCoord)}})});if(contained){results.push(helpers.multiPoint(pointsWithin))}}else{throw new Error("Input geometry must be a Point or MultiPoint")}});return helpers.featureCollection(results)}module.exports=pointsWithinPolygon;module.exports.default=pointsWithinPolygon},{"@turf/boolean-point-in-polygon":5,"@turf/helpers":11,"@turf/meta":13}],16:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var helpers_1=require("@turf/helpers");var invariant_1=require("@turf/invariant");function rhumbBearing(start,end,options){if(options===void 0){options={}}var bear360;if(options.final){bear360=calculateRhumbBearing(invariant_1.getCoord(end),invariant_1.getCoord(start))}else{bear360=calculateRhumbBearing(invariant_1.getCoord(start),invariant_1.getCoord(end))}var bear180=bear360>180? -(360-bear360):bear360;return bear180}function calculateRhumbBearing(from,to){var phi1=helpers_1.degreesToRadians(from[1]);var phi2=helpers_1.degreesToRadians(to[1]);var deltaLambda=helpers_1.degreesToRadians(to[0]-from[0]);if(deltaLambda>Math.PI){deltaLambda-=2*Math.PI}if(deltaLambda< -Math.PI){deltaLambda+=2*Math.PI}var deltaPsi=Math.log(Math.tan(phi2/2+Math.PI/4)/Math.tan(phi1/2+Math.PI/4));var theta=Math.atan2(deltaLambda,deltaPsi);return(helpers_1.radiansToDegrees(theta)+360)%360}exports.default=rhumbBearing},{"@turf/helpers":11,"@turf/invariant":12}],17:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var helpers_1=require("@turf/helpers");var invariant_1=require("@turf/invariant");function rhumbDestination(origin,distance,bearing,options){if(options===void 0){options={}}var wasNegativeDistance=distance<0;var distanceInMeters=helpers_1.convertLength(Math.abs(distance),options.units,"meters");if(wasNegativeDistance){distanceInMeters= -Math.abs(distanceInMeters)}var coords=invariant_1.getCoord(origin);var destination=calculateRhumbDestination(coords,distanceInMeters,bearing);destination[0]+=destination[0]-coords[0]>180?-360:coords[0]-destination[0]>180?360:0;return helpers_1.point(destination,options.properties)}function calculateRhumbDestination(origin,distance,bearing,radius){radius=radius===undefined?helpers_1.earthRadius:Number(radius);var delta=distance/radius;var lambda1=(origin[0]*Math.PI)/180;var phi1=helpers_1.degreesToRadians(origin[1]);var theta=helpers_1.degreesToRadians(bearing);var DeltaPhi=delta*Math.cos(theta);var phi2=phi1+DeltaPhi;if(Math.abs(phi2)>Math.PI/2){phi2=phi2>0?Math.PI-phi2: -Math.PI-phi2}var DeltaPsi=Math.log(Math.tan(phi2/2+Math.PI/4)/Math.tan(phi1/2+Math.PI/4));var q=Math.abs(DeltaPsi)>10e-12?DeltaPhi/DeltaPsi:Math.cos(phi1);var DeltaLambda=(delta*Math.sin(theta))/q;var lambda2=lambda1+DeltaLambda;return[(((lambda2*180)/Math.PI+540)%360)-180,(phi2*180)/Math.PI];}exports.default=rhumbDestination},{"@turf/helpers":11,"@turf/invariant":12}],18:[function(require,module,exports){"use strict";Object.defineProperty(exports,"__esModule",{value:true});var helpers_1=require("@turf/helpers");var invariant_1=require("@turf/invariant");function rhumbDistance(from,to,options){if(options===void 0){options={}}var origin=invariant_1.getCoord(from);var destination=invariant_1.getCoord(to);destination[0]+=destination[0]-origin[0]>180?-360:origin[0]-destination[0]>180?360:0;var distanceInMeters=calculateRhumbDistance(origin,destination);var distance=helpers_1.convertLength(distanceInMeters,"meters",options.units);return distance}function calculateRhumbDistance(origin,destination,radius){radius=radius===undefined?helpers_1.earthRadius:Number(radius);var R=radius;var phi1=(origin[1]*Math.PI)/180;var phi2=(destination[1]*Math.PI)/180;var DeltaPhi=phi2-phi1;var DeltaLambda=(Math.abs(destination[0]-origin[0])*Math.PI)/180;if(DeltaLambda>Math.PI){DeltaLambda-=2*Math.PI}var DeltaPsi=Math.log(Math.tan(phi2/2+Math.PI/4)/Math.tan(phi1/2+Math.PI/4));var q=Math.abs(DeltaPsi)>10e-12?DeltaPhi/DeltaPsi:Math.cos(phi1);var delta=Math.sqrt(DeltaPhi*DeltaPhi+q*q*DeltaLambda*DeltaLambda);var dist=delta*R;return dist}exports.default=rhumbDistance},{"@turf/helpers":11,"@turf/invariant":12}],19:[function(require,module,exports){'use strict';var clone=require('@turf/clone');var center=require('@turf/center');var centroid=require('@turf/centroid');var turfBBox=require('@turf/bbox');var rhumbBearing=require('@turf/rhumb-bearing');var rhumbDistance=require('@turf/rhumb-distance');var rhumbDestination=require('@turf/rhumb-destination');var meta=require('@turf/meta');var helpers=require('@turf/helpers');var invariant=require('@turf/invariant');function _interopDefaultLegacy(e){return e&&typeof e==='object'&&'default'in e?e:{'default':e}}var clone__default=_interopDefaultLegacy(clone);var center__default=_interopDefaultLegacy(center);var centroid__default=_interopDefaultLegacy(centroid);var turfBBox__default=_interopDefaultLegacy(turfBBox);var rhumbBearing__default=_interopDefaultLegacy(rhumbBearing);var rhumbDistance__default=_interopDefaultLegacy(rhumbDistance);var rhumbDestination__default=_interopDefaultLegacy(rhumbDestination);function transformScale(geojson,factor,options){options=options||{};if(!helpers.isObject(options)){throw new Error("options is invalid")}var origin=options.origin;var mutate=options.mutate;if(!geojson){throw new Error("geojson required")}if(typeof factor!=="number"||factor===0){throw new Error("invalid factor")}var originIsPoint=Array.isArray(origin)||typeof origin==="object";if(mutate!==true){geojson=clone__default['default'](geojson)}if(geojson.type==="FeatureCollection"&&!originIsPoint){meta.featureEach(geojson,function(feature,index){geojson.features[index]=scale(feature,factor,origin)});return geojson}return scale(geojson,factor,origin)}function scale(feature,factor,origin){var isPoint=invariant.getType(feature)==="Point";origin=defineOrigin(feature,origin);if(factor===1||isPoint){return feature}meta.coordEach(feature,function(coord){var originalDistance=rhumbDistance__default['default'](origin,coord);var bearing=rhumbBearing__default['default'](origin,coord);var newDistance=originalDistance*factor;var newCoord=invariant.getCoords(rhumbDestination__default['default'](origin,newDistance,bearing));coord[0]=newCoord[0];coord[1]=newCoord[1];if(coord.length===3){coord[2]*=factor}});return feature}function defineOrigin(geojson,origin){if(origin===undefined||origin===null){origin="centroid"}if(Array.isArray(origin)||typeof origin==="object"){return invariant.getCoord(origin)}var bbox=geojson.bbox?geojson.bbox:turfBBox__default['default'](geojson);var west=bbox[0];var south=bbox[1];var east=bbox[2];var north=bbox[3];switch(origin){case "sw":case "southwest":case "westsouth":case "bottomleft":return helpers.point([west,south]);case "se":case "southeast":case "eastsouth":case "bottomright":return helpers.point([east,south]);case "nw":case "northwest":case "westnorth":case "topleft":return helpers.point([west,north]);case "ne":case "northeast":case "eastnorth":case "topright":return helpers.point([east,north]);case "center":return center__default['default'](geojson);case undefined:case null:case "centroid":return centroid__default['default'](geojson);default:throw new Error("invalid origin")}}module.exports=transformScale;module.exports.default=transformScale},{"@turf/bbox":3,"@turf/center":6,"@turf/centroid":7,"@turf/clone":8,"@turf/helpers":11,"@turf/invariant":12,"@turf/meta":13,"@turf/rhumb-bearing":16,"@turf/rhumb-destination":17,"@turf/rhumb-distance":18}]},{},[1])(1)});